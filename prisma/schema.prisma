// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(uuid())
  clerkId   String        @unique
  email     String        @unique
  firstName String?
  lastName  String?
  createdAt DateTime      @default(now()) @db.Timestamptz
  updatedAt DateTime      @default(now()) @db.Timestamptz
  subscriptions Subscription[]
  studySessions StudySession[]
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  stripeCustomerId String?
  stripePriceId   String?
  stripeSubscriptionId String?
  status          String    // 'active', 'canceled', 'past_due', etc.
  currentPeriodStart DateTime @db.Timestamptz
  currentPeriodEnd   DateTime @db.Timestamptz
  createdAt       DateTime  @default(now()) @db.Timestamptz
  updatedAt       DateTime  @updatedAt @db.Timestamptz

  @@index([userId])
}

model Question {
  id          String    @id @default(uuid())
  title       String    @db.Text
  optionA     String    @db.Text
  optionB     String    @db.Text
  optionC     String    @db.Text
  optionD     String?   @db.Text
  correctAnswer String   @db.VarChar(1)  // 'A', 'B', 'C', or 'D'
  explanation String     @db.Text
  createdAt   DateTime   @default(now()) @db.Timestamptz
  updatedAt   DateTime   @updatedAt @db.Timestamptz
  
  // Relation to study session answers
  answers     SessionAnswer[]

  @@index([id])
}

model StudySession {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  startedAt   DateTime  @default(now()) @db.Timestamptz
  completedAt DateTime? @db.Timestamptz
  durationSeconds Int?  // Duration of the session in seconds
  score       Int       @default(0)
  totalQuestions Int    @default(0)
  status      String    @default("in_progress") // "in_progress", "completed", "abandoned"
  
  // Relation to session answers
  answers     SessionAnswer[]
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@index([userId])
}

model SessionAnswer {
  sessionId   String
  session     StudySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id])
  selectedAnswer String? @db.VarChar(1)  // 'A', 'B', or 'C' or null if not answered
  isCorrect   Boolean?
  answeredAt  DateTime? @db.Timestamptz
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@id([sessionId, questionId])
  @@index([sessionId])
  @@index([questionId])
}
