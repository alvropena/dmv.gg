// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
}

enum TestType {
  NEW         // For first-time tests
  REVIEW      // For reviewing previously seen questions
  WEAK_AREAS  // For practicing questions from weak areas
}

enum EmailTriggerType {
  USER_SIGNUP
  TEST_INCOMPLETE
  CART_ABANDONED
  PROFILE_UPDATED
  PURCHASE_COMPLETED
}

enum CampaignType {
  ONE_TIME
  DRIP
  REMINDER
  TRIGGERED
  RECURRING
  AB_TEST
}

enum ScheduleType {
  TRIGGER
  SCHEDULE
}

enum RecipientSegment {
  ALL_USERS
  NEW_SIGNUPS
  VIP_USERS
  INACTIVE_USERS
  TEST_INCOMPLETE
}

model User {
  id        String        @id @default(uuid())
  clerkId   String        @unique
  email     String        @unique
  firstName String?
  lastName  String?
  birthday  DateTime?     @db.Date
  gender    String?       // 'male', 'female', 'non-binary', 'other', 'prefer-not-to-say'
  ethnicity String?       // 'white', 'black', 'asian', 'hispanic', 'other', 'prefer-not-to-say'
  language  String?       // 'en', 'es', etc.
  
  role      UserRole      @default(STUDENT)
  hasUsedFreeTest Boolean @default(false)
  createdAt DateTime      @default(now()) @db.Timestamptz
  updatedAt DateTime      @default(now()) @db.Timestamptz
  subscriptions Subscription[]
  tests Test[]
  supportRequests SupportRequest[]
  flaggedQuestions FlaggedQuestion[]
}

model Subscription {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  stripeCustomerId String?
  stripePriceId   String?
  stripeSubscriptionId String?
  status          String    // 'active', 'canceled', 'past_due', etc.
  cancelAtPeriodEnd Boolean @default(false) // Track if subscription is set to cancel at period end
  currentPeriodStart DateTime @db.Timestamptz
  currentPeriodEnd   DateTime @db.Timestamptz
  createdAt       DateTime  @default(now()) @db.Timestamptz
  updatedAt       DateTime  @updatedAt @db.Timestamptz

  @@index([userId])
}

model Question {
  id          String    @id @default(uuid())
  title       String    @db.Text
  optionA     String    @db.Text
  optionB     String    @db.Text
  optionC     String    @db.Text
  optionD     String?   @db.Text
  image       String?   @db.Text  // URL to the image
  correctAnswer String   @db.VarChar(1)  // 'A', 'B', 'C', or 'D'
  explanation String     @db.Text
  createdAt   DateTime   @default(now()) @db.Timestamptz
  updatedAt   DateTime   @updatedAt @db.Timestamptz
  
  // Relation to test answers
  answers     TestAnswer[]
  
  // Relation to tests that include this question
  tests    TestQuestion[]
  // Relation to flagged reports
  flags    FlaggedQuestion[]

  @@index([id])
}

model Test {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        TestType  @default(NEW)  // Type of test
  startedAt   DateTime  @default(now()) @db.Timestamptz
  completedAt DateTime? @db.Timestamptz
  score       Int       @default(0)
  totalQuestions Int    @default(0)
  status      String    @default("in_progress") // "in_progress", "completed", "abandoned"
  
  // Relation to test answers
  answers     TestAnswer[]

  // Relation to questions included in this test
  questions   TestQuestion[]
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@index([userId])
  @@index([type])  // Add index on type for faster queries
}

model TestQuestion {
  testId      String
  test        Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id])
  order       Int       // Position of the question in the test
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@id([testId, questionId])
  @@index([testId])
  @@index([questionId])
}

model TestAnswer {
  testId      String
  test        Test @relation(fields: [testId], references: [id], onDelete: Cascade)
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id])
  selectedAnswer String? @db.VarChar(1)  // 'A', 'B', or 'C' or null if not answered
  isCorrect   Boolean?
  answeredAt  DateTime? @db.Timestamptz
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@id([testId, questionId])
  @@index([testId])
  @@index([questionId])
}

model SupportRequest {
  id          String    @id @default(uuid())
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
  email       String?   // For guests/non-logged in users
  message     String    @db.Text
  status      String    @default("open") // "open", "in_progress", "resolved", "closed"
  resolution  String?   @db.Text
  adminNotes  String?   @db.Text
  
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  resolvedAt  DateTime? @db.Timestamptz

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model FlaggedQuestion {
  id          String    @id @default(uuid())
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  reason      String    @db.Text
  status      String    @default("pending") // "pending", "reviewed", "resolved", "dismissed"
  adminNotes  String?   @db.Text
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz
  resolvedAt  DateTime? @db.Timestamptz

  @@index([questionId])
  @@index([userId])
  @@index([status])
}

model Creator {
  id         String   @id @default(uuid())
  name       String
  handle     String   @unique
  category   String
  followers  Int
  engagement Float
  status     String
  platforms  String[]
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz
}

model Reminder {
  id          String    @id @default(uuid())
  text        String    @db.Text
  completed   Boolean   @default(false)
  archived    Boolean   @default(false)
  dueDate     DateTime? @db.Timestamptz
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@index([completed])
  @@index([dueDate])
  @@index([archived])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([createdAt])
}

model EmailCampaign {
  id          String      @id @default(uuid())
  name        String
  description String?     @db.Text
  subject     String
  content     String      @db.Text
  from        String      @default("noreply@dmv.gg")
  status      String      @default("draft") // 'draft', 'scheduled', 'sending', 'completed', 'failed'
  active      Boolean     @default(true)
  type        CampaignType @default(ONE_TIME)
  
  // Schedule configuration
  scheduleType ScheduleType
  triggerType  EmailTriggerType?  // Required if scheduleType is TRIGGER
  scheduledFor DateTime?          // Required if scheduleType is SCHEDULE
  recipientSegment RecipientSegment @default(ALL_USERS)
  
  // Tracking
  createdAt   DateTime    @default(now()) @db.Timestamptz
  updatedAt   DateTime    @updatedAt @db.Timestamptz
  sentEmails  SentEmail[]

  @@index([status])
  @@index([scheduleType])
  @@index([triggerType])
  @@index([scheduledFor])
  @@index([recipientSegment])
}

model SentEmail {
  id             String        @id @default(uuid())
  campaignId     String
  campaign       EmailCampaign @relation(fields: [campaignId], references: [id])
  recipientEmail String
  status         String        @default("pending") // 'pending', 'sent', 'failed', 'delivered', 'opened', 'clicked'
  
  // Email tracking timestamps
  sentAt         DateTime?     @db.Timestamptz
  deliveredAt    DateTime?     @db.Timestamptz
  openedAt       DateTime?     @db.Timestamptz
  clickedAt      DateTime?     @db.Timestamptz
  
  // Error tracking
  error          String?       @db.Text
  
  // Metadata
  createdAt      DateTime      @default(now()) @db.Timestamptz
  updatedAt      DateTime      @updatedAt @db.Timestamptz

  @@index([campaignId])
  @@index([status])
  @@index([recipientEmail])
  @@index([sentAt])
}
