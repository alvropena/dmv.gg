generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  clerkId           String            @unique
  email             String            @unique
  firstName         String?
  lastName          String?
  birthday          DateTime?         @db.Date
  role              UserRole          @default(STUDENT)
  hasUsedFreeTest   Boolean           @default(false)
  createdAt         DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime          @default(now()) @db.Timestamptz(6)
  ethnicity         String?
  gender            String?
  language          String?
  emailMarketing    Boolean           @default(true)
  emailSecurity     Boolean           @default(true)
  emailUpdates      Boolean           @default(true)
  newsletter        Boolean           @default(true)
  progressUpdates   Boolean           @default(true)
  promotionalEmails Boolean           @default(true)
  studyTips         Boolean           @default(true)
  testReminders     Boolean           @default(true)
  weakAreasAlerts   Boolean           @default(true)
  flaggedQuestions  FlaggedQuestion[]
  subscriptions     Subscription[]
  supportRequests   SupportRequest[]
  tests             Test[]
}

model Subscription {
  id                   String   @id @default(uuid())
  userId               String
  stripeCustomerId     String?
  stripePriceId        String?
  stripeSubscriptionId String?
  status               String
  cancelAtPeriodEnd    Boolean  @default(false)
  currentPeriodStart   DateTime @db.Timestamptz(6)
  currentPeriodEnd     DateTime @db.Timestamptz(6)
  createdAt            DateTime @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @db.Timestamptz(6)
  user                 User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Question {
  id            String            @id @default(uuid())
  title         String
  optionA       String
  optionB       String
  optionC       String
  optionD       String?
  image         String?
  correctAnswer String            @db.VarChar(1)
  explanation   String
  createdAt     DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime          @updatedAt @db.Timestamptz(6)
  flags         FlaggedQuestion[]
  answers       TestAnswer[]
  tests         TestQuestion[]

  @@index([id])
}

model Test {
  id             String         @id @default(uuid())
  userId         String
  startedAt      DateTime       @default(now()) @db.Timestamptz(6)
  completedAt    DateTime?      @db.Timestamptz(6)
  score          Int            @default(0)
  totalQuestions Int            @default(0)
  status         String         @default("in_progress")
  createdAt      DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime       @updatedAt @db.Timestamptz(6)
  type           TestType       @default(NEW)
  user           User           @relation(fields: [userId], references: [id])
  answers        TestAnswer[]
  questions      TestQuestion[]

  @@index([userId])
  @@index([type])
}

model TestQuestion {
  testId     String
  questionId String
  order      Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
  question   Question @relation(fields: [questionId], references: [id])
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@id([testId, questionId])
  @@index([testId])
  @@index([questionId])
}

model TestAnswer {
  testId         String
  questionId     String
  selectedAnswer String?   @db.VarChar(1)
  isCorrect      Boolean?
  answeredAt     DateTime? @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @db.Timestamptz(6)
  question       Question  @relation(fields: [questionId], references: [id])
  test           Test      @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@id([testId, questionId])
  @@index([testId])
  @@index([questionId])
}

model SupportRequest {
  id         String    @id @default(uuid())
  userId     String?
  email      String?
  message    String
  status     String    @default("open")
  resolution String?
  adminNotes String?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  resolvedAt DateTime? @db.Timestamptz(6)
  user       User?     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model FlaggedQuestion {
  id         String    @id @default(uuid())
  questionId String
  userId     String
  reason     String
  status     String    @default("pending")
  adminNotes String?
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @db.Timestamptz(6)
  resolvedAt DateTime? @db.Timestamptz(6)
  question   Question  @relation(fields: [questionId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@index([questionId])
  @@index([userId])
  @@index([status])
}

model Creator {
  id         String   @id @default(uuid())
  name       String
  handle     String   @unique
  category   String
  followers  Int
  engagement Float
  status     String
  platforms  String[]
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @db.Timestamptz(6)
}

model Reminder {
  id        String    @id @default(uuid())
  text      String
  completed Boolean   @default(false)
  dueDate   DateTime? @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @db.Timestamptz(6)
  archived  Boolean   @default(false)

  @@index([completed])
  @@index([dueDate])
  @@index([archived])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([createdAt])
}

model SentEmail {
  id             String        @id @default(uuid())
  campaignId     String
  recipientEmail String
  status         String        @default("pending")
  sentAt         DateTime?     @db.Timestamptz(6)
  deliveredAt    DateTime?     @db.Timestamptz(6)
  openedAt       DateTime?     @db.Timestamptz(6)
  clickedAt      DateTime?     @db.Timestamptz(6)
  error          String?
  errorCode      String?
  errorMessage   String?
  messageId      String?
  metadata       Json?
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(6)
  campaign       EmailCampaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@index([status])
  @@index([recipientEmail])
  @@index([sentAt])
}

model EmailCampaign {
  id               String            @id @default(uuid())
  name             String
  description      String?
  subject          String
  content          String
  from             String            @default("noreply@dmv.gg")
  status           String            @default("draft")
  active           Boolean           @default(true)
  type             CampaignType      @default(ONE_TIME)
  scheduleType     ScheduleType
  triggerType      EmailTriggerType?
  scheduledFor     DateTime?
  recipientSegment RecipientSegment  @default(ALL_USERS)
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)
  sentEmails       SentEmail[]

  @@index([status])
  @@index([scheduleType])
  @@index([triggerType])
  @@index([scheduledFor])
  @@index([recipientSegment])
}

enum UserRole {
  STUDENT
  ADMIN
  TEST
}

enum TestType {
  NEW
  REVIEW
  WEAK_AREAS
}

enum EmailTriggerType {
  USER_SIGNUP
  TEST_INCOMPLETE
  PURCHASE_COMPLETED
  PROFILE_UPDATED
  CART_ABANDONED
}

enum CampaignType {
  ONE_TIME
  RECURRING
  AB_TEST
}

enum ScheduleType {
  TRIGGER
  SCHEDULE
}

enum RecipientSegment {
  ALL_USERS
  TEST_USERS
  INDIVIDUAL_USERS
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  FAILED
  BOUNCED
  COMPLAINED
  UNSUBSCRIBED
}
